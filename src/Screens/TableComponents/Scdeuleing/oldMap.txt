import React, { Component } from 'react';
import scriptLoader from 'react-async-script-loader';
class Map extends Component{
    constructor(props) {
        super(props);
    }
    componentWillReceiveProps({isScriptLoadSucceed}){
        if (isScriptLoadSucceed) {
            /* var markers = [];

            var map = new window.google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: {lat: -1.2884, lng: 36.8233}
            });
 */
            const map = new window.google.maps.Map(document.getElementById("map"), {
                center: { lat: -33.8688, lng: 151.2195 },
                zoom: 13,
                mapTypeId: "roadmap",
              });
              // Create the search box and link it to the UI element.
              const input = document.getElementById("pac-input");
              const searchBox = new window.google.maps.places.SearchBox(input);
              map.controls[window.google.maps.ControlPosition.TOP_LEFT].push(input);
              // Bias the SearchBox results towards current map's viewport.
              map.addListener("bounds_changed", () => {
                searchBox.setBounds(map.getBounds());
              });
              let markers = [];
              // Listen for the event fired when the user selects a prediction and retrieve
              // more details for that place.
              searchBox.addListener("places_changed", () => {
                const places = searchBox.getPlaces();
            
                if (places.length == 0) {
                  return;
                }
                // Clear out the old markers.
                markers.forEach((marker) => {
                  marker.setMap(null);
                });
                markers = [];
                // For each place, get the icon, name and location.
                const bounds = new window.google.maps.LatLngBounds();
                places.forEach((place) => {
                  if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                  }
                  const icon = {
                    url: place.icon,
                    size: new window.google.maps.Size(71, 71),
                    origin: new window.google.maps.Point(0, 0),
                    anchor: new window.google.maps.Point(17, 34),
                    scaledSize: new window.google.maps.Size(25, 25),
                  };
                  // Create a marker for each place.
                  markers.push(
                    new window.google.maps.Marker({
                      map,
                      icon,
                      title: place.name,
                      position: place.geometry.location,
                    })
                  );
            
                  if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                  } else {
                    bounds.extend(place.geometry.location);
                  }
                });
                map.fitBounds(bounds);
              });

              const drawingManager = new window.google.maps.drawing.DrawingManager({
                drawingMode: window.google.maps.drawing.OverlayType.MARKER,
                drawingControl: true,
                drawingControlOptions: {
                    position: window.google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        //window.google.maps.drawing.OverlayType.MARKER,
                        //window.google.maps.drawing.OverlayType.CIRCLE,
                        window.google.maps.drawing.OverlayType.POLYGON,
                        //window.google.maps.drawing.OverlayType.POLYLINE,
                        window.google.maps.drawing.OverlayType.RECTANGLE,
                    ],
                },
                markerOptions: {
                    icon: "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png",
                },
                circleOptions: {
                    fillColor: "#ffff00",
                    fillOpacity: 1,
                    strokeWeight: 5,
                    clickable: false,
                    editable: true,
                    zIndex: 1,
                },
            });
            drawingManager.setMap(map);
            let getPolygonCoords =function(){
                console.log("callgetPolygonCoords")
            }
            /* window.google.maps.event.addListener(drawingManager, "dragend", getPolygonCoords);
            window.google.maps.event.addListener(drawingManager.getPath(), "insert_at", getPolygonCoords);
            window.google.maps.event.addListener(drawingManager.getPath(), "remove_at", getPolygonCoords);
            window.google.maps.event.addListener(drawingManager.getPath(), "set_at", getPolygonCoords); */
            window.google.maps.event.addListener(drawingManager, 'overlaycomplete', function(polygon) {
                var coordinatesArray = polygon.overlay.getPath().getArray();
                console.log("array is",coordinatesArray);
                coordinatesArray.forEach(function(item){
                     console.log(item.toUrlValue(5))
                });
            });

            
        }
        else{
            //alert("script not loaded")
        }
    }

    render(){
        return(
            <div>
                <input
      id="pac-input"
      className="controls"
      type="text"
      placeholder="Search Box"
    />
                <div id="map" style={{height: "600px"}}></div>
            </div>
        )
    }
}

export default scriptLoader(
    ["https://maps.googleapis.com/maps/api/js?key=AIzaSyB7_MYCPUafhKpDmqFZSGDBWZ0FoH1pkzs&callback=initAutocomplete&libraries=places,drawing&v=weekly"]
)(Map)